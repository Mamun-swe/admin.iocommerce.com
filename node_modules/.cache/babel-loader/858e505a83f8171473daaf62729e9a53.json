{"ast":null,"code":"import Axios from 'axios';\nimport swal from 'sweetalert';\nimport { aclApi } from '../api';\nimport { ErrorHandeller } from './Error'; // List of items\n\nconst Role = async header => {\n  try {\n    const response = await Axios.get(`${aclApi}role`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return ErrorHandeller(error);\n  }\n}; // Index of routes\n\n\n_c = Role;\n\nconst Routes = async header => {\n  try {\n    const response = await Axios.get(`${aclApi}role/route/paths`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return ErrorHandeller(error);\n  }\n}; // Store item\n\n\n_c2 = Routes;\n\nconst Store = async (data, header) => {\n  try {\n    const response = await Axios.post(`${aclApi}role`, data, header);\n\n    if (response.status === 201) {\n      swal({\n        title: \"Successfully!\",\n        text: response.data.message,\n        icon: \"success\",\n        button: false\n      });\n      return true;\n    }\n  } catch (error) {\n    if (error) {\n      return ErrorHandeller(error);\n    }\n  }\n}; // Show item\n\n\n_c3 = Store;\n\nconst Show = async (id, header) => {\n  try {\n    const response = await Axios.get(`${aclApi}role/${id}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return ErrorHandeller(error);\n  }\n}; // Update specific items\n\n\n_c4 = Show;\n\nconst Update = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${aclApi}role/${id}`, data, header);\n\n    if (response.status === 201) {\n      swal({\n        title: \"Successfully!\",\n        text: response.data.message,\n        icon: \"success\",\n        button: false\n      });\n      return true;\n    }\n  } catch (error) {\n    if (error) return ErrorHandeller(error);\n  }\n}; // Delete item\n\n\n_c5 = Update;\n\nconst Delete = async (id, header) => {\n  try {\n    const response = await Axios.delete(`${aclApi}role/${id}`, header);\n\n    if (response.status === 200) {\n      swal({\n        title: \"Successfully!\",\n        text: response.data.message,\n        icon: \"success\",\n        button: false\n      });\n      return true;\n    }\n  } catch (error) {\n    if (error) return ErrorHandeller(error);\n  }\n};\n\n_c6 = Delete;\nconst Acl = {\n  Role,\n  Routes,\n  Store,\n  Show,\n  Update,\n  Delete\n};\nexport default Acl;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Role\");\n$RefreshReg$(_c2, \"Routes\");\n$RefreshReg$(_c3, \"Store\");\n$RefreshReg$(_c4, \"Show\");\n$RefreshReg$(_c5, \"Update\");\n$RefreshReg$(_c6, \"Delete\");","map":{"version":3,"sources":["/media/mamun/Tools/GrapFood/admin/src/utils/Requests/Acl.js"],"names":["Axios","swal","aclApi","ErrorHandeller","Role","header","response","get","status","data","error","Routes","Store","post","title","text","message","icon","button","Show","id","Update","put","Delete","delete","Acl"],"mappings":"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","sourcesContent":["import Axios from 'axios'\nimport swal from 'sweetalert'\nimport { aclApi } from '../api'\nimport { ErrorHandeller } from './Error'\n\n// List of items\nconst Role = async (header) => {\n    try {\n        const response = await Axios.get(`${aclApi}role`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return ErrorHandeller(error)\n    }\n}\n\n// Index of routes\nconst Routes = async (header) => {\n    try {\n        const response = await Axios.get(`${aclApi}role/route/paths`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return ErrorHandeller(error)\n    }\n}\n\n\n// Store item\nconst Store = async (data, header) => {\n    try {\n        const response = await Axios.post(`${aclApi}role`, data, header)\n        if (response.status === 201) {\n            swal({\n                title: \"Successfully!\",\n                text: response.data.message,\n                icon: \"success\",\n                button: false,\n            })\n            return true\n        }\n    } catch (error) {\n        if (error){\n            return ErrorHandeller(error)\n        }\n    }\n}\n\n// Show item\nconst Show = async (id, header) => {\n    try {\n        const response = await Axios.get(`${aclApi}role/${id}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return ErrorHandeller(error)\n    }\n}\n\n// Update specific items\nconst Update = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${aclApi}role/${id}`, data, header)\n        if (response.status === 201) {\n            swal({\n                title: \"Successfully!\",\n                text: response.data.message,\n                icon: \"success\",\n                button: false,\n            })\n            return true\n        }\n    } catch (error) {\n        if (error) return ErrorHandeller(error)\n    }\n}\n\n// Delete item\nconst Delete = async (id, header) => {\n    try {\n        const response = await Axios.delete(`${aclApi}role/${id}`, header)\n        if (response.status === 200) {\n            swal({\n                title: \"Successfully!\",\n                text: response.data.message,\n                icon: \"success\",\n                button: false,\n            })\n            return true\n        }\n    } catch (error) {\n        if (error) return ErrorHandeller(error)\n    }\n}\n\nconst Acl = {\n    Role,\n    Routes,\n    Store,\n    Show,\n    Update,\n    Delete\n}\n\nexport default Acl"]},"metadata":{},"sourceType":"module"}