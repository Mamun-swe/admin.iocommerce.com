{"ast":null,"code":"var _jsxFileName = \"/media/mamun/Tools/GrapFood/admin/src/components/privateRoute/Index.js\";\nimport { Route, Redirect } from 'react-router-dom';\nimport { isLoggedin } from '../../utils/Authenticate'; // const RoleBasedRouting = ({ component: Component, role, ...rest }) => {\n//     return (\n//         <>\n//             {isLoggedin(role) && (\n//                 <Route\n//                     {...rest}\n//                     render={(props) => (\n//                         <>\n//                             <Component {...props} />\n//                         </>\n//                     )}\n//                 />\n//             )}\n//             {\n//                 !isLoggedin(role) && (\n//                     <Redirect to={{ pathname: \"/\" }} />\n//                 )\n//             }\n//         </>\n//     );\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RoleBasedRouting = ({\n  component: Component,\n  ...rest\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoggedin ? /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Component, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: \"/\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_c = RoleBasedRouting;\nexport default RoleBasedRouting;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoleBasedRouting\");","map":{"version":3,"sources":["/media/mamun/Tools/GrapFood/admin/src/components/privateRoute/Index.js"],"names":["Route","Redirect","isLoggedin","RoleBasedRouting","component","Component","rest","props","pathname"],"mappings":";AACA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC5D,sBACI;AAAA,cACKJ,UAAU,gBACP,QAAC,KAAD,OACQI,IADR;AAEI,MAAA,MAAM,EAAGC,KAAD,iBACJ;AAAA,+BACI,QAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAHR;AAAA;AAAA;AAAA;AAAA,YADO,gBAUP,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA;AAXR,mBADJ;AAgBH,CAjBD;;KAAML,gB;AAmBN,eAAeA,gBAAf","sourcesContent":["\nimport { Route, Redirect } from 'react-router-dom'\nimport { isLoggedin } from '../../utils/Authenticate'\n\n// const RoleBasedRouting = ({ component: Component, role, ...rest }) => {\n//     return (\n//         <>\n//             {isLoggedin(role) && (\n//                 <Route\n//                     {...rest}\n//                     render={(props) => (\n//                         <>\n//                             <Component {...props} />\n//                         </>\n//                     )}\n//                 />\n//             )}\n//             {\n//                 !isLoggedin(role) && (\n//                     <Redirect to={{ pathname: \"/\" }} />\n//                 )\n//             }\n//         </>\n//     );\n// }\n\nconst RoleBasedRouting = ({ component: Component, ...rest }) => {\n    return (\n        <>\n            {isLoggedin ?\n                <Route\n                    {...rest}\n                    render={(props) => (\n                        <>\n                            <Component {...props} />\n                        </>\n                    )}\n                />\n                :\n                <Redirect to={{ pathname: \"/\" }} />\n            }\n        </>\n    );\n}\n\nexport default RoleBasedRouting;"]},"metadata":{},"sourceType":"module"}